#!/bin/bash
#
#    Opens a file or a folder and creates the preetyfied code
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage="Usage: $(basename "$0") [-h] [-v] [-e | extension (default .py)] [-a | version]\n
\t\t[-o |output folder (default \"preety\")] file\n
Converts code into a preety formated pdf\n"
arguments="Arguments:\n
\t-h, --help\tshow this help\n
\t-b, --verbose\texplain whats being done\n
\t-e, --extension\tChanges the file extension for the target files\n
\t-a, --code_version\tAdds the version number to the header\n
\t-o, --output\tChanges the output folder\n
\t-V, --version\tShows the software version
"
version="v0.1"
verbose=false
extension=".py"
code_version=""
output="preety"
files_args=()
files=()
dirs_list=()

print_err () {
  >&2 echo -e $1
  >&2 echo -e $usage
  exit 0
}

print_help () {
  echo -e $1
  echo -e $usage
  echo -e $arguments
  exit 0
}


# convert long args
c=0
e=2
for var in $@; do
  if [ $var = '--help' ]; then
    set -- "${@:1:c}" "-h" "${@:e}"
  elif [ $var = '-verbose' ]; then
    set -- "${@:1:c}" "-v" "${@:e}"
  elif [ $var = '-extension' ]; then
    set -- "${@:1:c}" "-e" "${@:e}"
  elif [ $var = '-output-folder' ]; then
    set -- "${@:1:c}" "-o" "${@:e}"
  elif [ $var = '-code_version' ]; then
    set -- "${@:1:c}" "-a" "${@:e}"
  elif [ $var = '-version' ]; then
    set -- "${@:1:c}" "-V" "${@:e}"
  fi
  c=$(($c + 1))
  d=$(($d + 1))
  e=$(($e + 1))
done

# parse args
while getopts 'hvVoa:e:' flag; do
  case "${flag}" in
    h) print_help ;;
    v) verbose=true ;;
    V) echo  "preetycode $version"; exit 0;;
    o) if [ -z ${OPTARG} ]; then
        print_err "Must specify an output folder";
      fi
      output=${OPTARG} ;;
    e) if [ -z ${OPTARG} ]; then
        print_err "Must specify an extension";
      fi
      extension=${OPTARG} ;;
    a) if [ -z ${OPTARG} ]; then
        print_err "Must specify a version";
      fi
      code_version=${OPTARG}; ;;
    *) print_err "Unexpected option ${flag}" ;;
  esac
done
shift $(expr $OPTIND - 1 )
while test $# -gt 0; do
  files_args+=($1)
  shift
done
if [ ${#files_args[@]} -eq 0 ]; then
  print_err  "Must specify folders or files"
fi

# get files list
for file_arg in ${files_args[@]}; do
  files+=($(find $file_arg -name "*$extension"))
  dirs_list+=($(find $file_arg -type d))
done
if [ ${#files[@]} -eq 0 ]; then
  print_err "No *$extension files found"
fi

# make dirs
if [ ! -d "$output" ]; then
  mkdir "$output"
fi
for dir in ${dirs_list[@]}; do
  if [ ! -d "$output/$dir" ]; then
    mkdir "$output/$dir"
  fi

done

# create files
for file in ${files[@]}; do
  # add header
  echo "File: $file - $(date)" > "/tmp/preetify"
  if [ -z $code_version ]; then
    echo "<br>" >> "/tmp/preetify"
  else
    echo " - Version: $code_version<br>" >> "/tmp/preetify"
  fi
  # add code
  echo "\`\`\`$extension" >> "/tmp/preetify"
  cat $file >> "/tmp/preetify"
  echo "\`\`\`" >> "/tmp/preetify"
  if [ $verbose=true ]; then
    echo "Creating file $file.pdf"
  fi
  pandoc "/tmp/preetify" --latex-engine=xelatex -V "geometry:margin=1in" -V "fontsize=10pt" -o "$output/$file.pdf"
done
